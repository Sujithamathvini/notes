promises - its an object
* ✅ promises, * ✅ then & catch
- promises are used to handle asynchronous operations in js. Its a constructor which has a callback function where all the operations are performed. In that callback function it has 2 arguments which are,
resolve - if the operations performed we can call ".then"
reject - if the operations didn't perform we can call ".catch"

- code :
example 1 :
const p1 = new Promise((resolve,reject) => {
    const flag = true
    if(flag){
        resolve({username : "suji", password : "123"})
    }
    else{
        reject("ERROR : Something went wrong !!")
    }
})

p1.then((data)=>{
    console.log(data.username);
})
p1.catch((data)=>{
    console.log(data);
})

example 2 : (chaining)
const p2 = new Promise((resolve,reject) => {
    const flag = true
    if(flag){
        resolve({username : "suji", password : "123"})
    }
    else{
        reject("ERROR : Something went wrong !!")
    }
})
p2.then((data)=>{
    console.log(data.username)
    return data.username
}).then((data) => {
    console.log(data);      // we can return value from one '.then' to its following '.then'
})
p2.catch((data)=>{
    console.log(data)
})

example 3 :
var p1 = new Promise((res,rej)=>{
    return res("go home,")
})

var p2 = p1.then((data)=>{
    console.log(data);                  // go home,
    return new Promise((res,rej)=>{
        return res("wash yourself,")
    })
})

var  p3 = p2.then((data)=>{
    console.log(data);                  // go home, wash yourself
    return new Promise((res,rej)=>{
        return res("now eat.")
    })
})

p3.then((data)=>{
    console.log(data);                  // go home, wash yourself, now eat.
})

example 4 :
var ans = fetch('https://jsonplaceholder.typicode.com/todos/1')
ans
.then((rawData)=>{
    return rawData.json() // since we use function with {} brace we need to put 'return'
}) // this will return to the next .then
.then((jsonData)=>{
    console.log(jsonData)
})

// simple form :
fetch('https://jsonplaceholder.typicode.com/todos/1')
.then((raw)=>{
    return raw.json()
})
.then((data)=>{
    console.log(data)
})

* ✅ go to async-await folder